# A. VARIABLE
#    Variable digunakan untuk menimpan suatu data. Dengan menyimpan data pada variable, maka data tersebut dapat digunakan kapanpun dibutuhkan
     dengan cara memanggilnya.

# Syarat membuat variable ada 3:
  1. Pembuatan variable dapat dimulai dengan huruf kapital (A-Z) atau huruf kecil (a-z).
  2. Pembuatan variable dapat dimulai dengan garis bawah / underscore (_) yang dikombinasikan dengan angka dan huruf.
  3. Penamaan variable tidak boleh dimulai dengan angka.
  4. Penamaan variable tidak boleh menggunakan spasi.

# Contoh
  DataKu        : valid 
  Data          : valid
  _Python3      : valid
  Sisi_x        : valid
  01_pertama    : tidak valid (karena menyalahi syarat pembuatan variable nomor 3)
  sisi y        : tidak valid (karena menyalahi syarat pembuatan variable nomor 4)

# Penugasan pada variable
  Penugasan pada variable merupakan perintah untuk menyimpan data ke sebuah variable. Pertama, deklarasikan sebuah variable (ingat syarat pembuatan
  variable diatas!). Kedua, berikan tanda sama dengan (=) agar dapat memberikan input data ke dalam variable. Ketiga, masukkan data yang ingin
  disimpan dalam variable.
  contoh:
    variable_1 = "hai, ini variable pertama saya!"
    variable_2 = 2
    variable_3 = 10
    variable_4 = variable_2 + variable_3
  
# Catatan-catatan
  1. Python adalah bahasa pemrograman case sensitive, artinya, huruf kecil dan huruf besar merupakan data yang berbeda meski tulisannya sama.
  2. Ada beberapa kata tertentu yang tidak dapat digunakan dalam pembuatan variable, karena merupakan kata kunci built-in instruksi python.
     Mereka adalah "and, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, 
     lambda,not, or, pass, print, raise, return, try, while".

==================================================

# B. OPERATOR
#    Operator adalah simbol yang digunakan untuk melakukan suatu operasi atau manipulasi data dalam program.

# Sifat Operator
1. Unary  : Operator yang melibatkan 1 buah operand (tanda operasi).
   contoh : -1, +2, -0.19, -78, 99, 321
2. Binary : Operator yang melibatkan 2 buah operand.
   contoh : 3+4, 9*10, 5-19, 7/3
3. Ternary: Operator yang melibatkan 3 buah operand.
   contoh : (9+1)/2, 3*9/5, 4+10-5
   
# Operator Aritmetika
1. Operator binary aritmetika
   a. (+) Penjumlahan              : 3+1 = 4
   b. (-) Pengurangan              : 7-1 = 6
   c. (*) Perkalian                : 6*5 = 30
   d. (/) Pembagian                : 5/5 = 1
   e. (%) Modulu / sisa pembagian  : 8%3 = 2
   f. (**) Perpangkatan            : 4**2 = 16
2. Operator unary aritmetika
   a. (+) Plus                     : +2, 3
   b. (-) Minus                    : -99
   c. (~) Negasi                   : ~5
3. Perioritas Operator Aritmetika
   a. (**)                               
   b. (*, /, %)                    
   c. (+, -)
   Jika terdapat operand dengan perioritas yang sama, maka penghitungan dimulai dengan yang paling kiri terlebih dahulu.
   contoh: 
   3/2*10 = 1.5*10 = 15
   
# Operator Bitwise
  Operator bitwise merupakan operator yang digunakan untuk memanipulasi data dalam bentuk bit.
  Ada 5 tanda operasi bitwise:
  1. (&) AND
     catatan:
     a. output akan bernilai 0 apabila minimal salah satu input/bit yang dibandingkan bernilai 0.
     b. output akan bernilai 1 apabila semua input/bit yang dibandingkan bernilai 1.
        0 & 0 = 0
        0 & 1 = 0
        1 & 0 = 0
        1 & 1 = 1
     contoh:
        3&7 = 3, sama dengan 011 & 111 = 011
        7&7 = 7, sama dengan 111 & 111 = 111
        
  2. (|) OR
     catatan:
     a. output bernilai 1 apabila minimal salah satu input/bit yang dibandingkan bernilai 1.
     b. output bernilai 0 apabila semua input/bit yang dibandingkan bernilai 0.
        0 | 0 = 0
        0 | 1 = 1
        1 | 0 = 1
        1 | 1 = 1
      contoh:
        3|4 = 7, sama dengan 011 | 100 = 111
        3|3 = 3, sama dengan 11 | 11 = 11
  
  3. (^) XOR / Exclusive OR
     catatan:
     a. output bernilai 1 apabila input/bit yang dibandingkan bernilai berlawanan.
     b. output bernilai 0 apabila input/bit yang dibandingkan bernilai sama.
        0 ^ 0 = 0
        0 ^ 1 = 1
        1 ^ 0 = 1
        1 ^ 1 = 0
      contoh:
        2^3 = 1, sama dengan 10 ^ 11 = 01
        4^7 = 3, sama dengan 100 ^ 111 = 011
        
  4. (<<) LEFT SHIFT / Geser bit ke kiri
     catatan:
     a. operator ini digunakan untuk menggeser bit data ke kiri sejauh yang diinginkan.
     b. setelah digeser, digit bit di belakangnya ditambahkan 0.
     contoh:
      3<<1 = 6, sama dengan 011 << (digeser 1 digit ke kiri) = 110
      3<<2 = 12, sama dengan 0011 << (digeser 2 digit ke kiri) = 1100
     
  5. (>>) RIGHT SHIFT
     catatan:
     a. operator ini digunakan untuk menggeser bit data ke kanan sejauh yang diinginkan.
     b. setelah digeser, bit yang tergeser ke kanan akan hilang.
     contoh:
      4>>1 = 2, sama dengan 100 >> (digeser 1 digit ke kanan) = 010
      4>>2 = 1, sama dengan 100 >> (digeser 2 digit ke kanan) = 001
      
==================================================      
 
# C. TIPE DATA NUMERIK
#    Dalam Python, setidaknya ada 3 tipe data numerik, diantaranya adalah integer, float, dan bilangan kompleks.

# Integer
  Integer merupakan tipe data yang digunakan untuk menangani bilangan bulat. Rentang nilai int() dimulai dari -2147483648 hingga 2147483647. 
  contoh:
    -123 (int)
    500 (int)
    10000 (int)
    
 # Float 
   Float digunakan untuk menangani bilangan pecahan.
   contoh:
   15.0 (float)
   4.3 (float)
   17.98 (float)
   
 # Bilangan Kompleks
   Python menyediakan tipe data numerik untuk menangani bilangan kompleks (imajiner) juga.
   contoh:
   2+4j = (2+4j)
   3*(2+4j) = (6+12j)
   (6+12j)/(2+4j) = (3+0j)

================================================== 

# D. STRING
     String merupakan sebuah karakter atau sekumpulan karakter yang berada dalam dua tanda petik ('' atau "").

# Penulisan String
  contoh:
  'ini adalah string pertama saya'
  "ini string kedua"

# Penugasan String pada Variable
  contoh:
  a = 'nama saya adalah'
  b = 'Andi'
  c = a + b
  print(c)
  nama saya adalahAndi

# Pengaksesan Anggota String
  catatan:
  a. indeks string dimulai dari 0 sampai n-1.
  contoh:
  a = "nama saya adalah Andi"
  print(a[0])
  n
  print(a[:4])
  nama
  print(a[4:])
   saya adalah Andi
   
# Menambah/Menyisipkan dan Menghapus String
  Disini akan diberikan sample penambahan/penyisipan dan penghapusan string menggunakan operasi penjumlahan pada string.
  1. Menambahkan/menyisipkan string
     contoh:
      string = "nama saya adalah Andi"
      string = string[:17]+"Muhammad"+string[16:]
      print(string)
      nama saya adalah Muhammad Andi
  2. Menghapus string
     contoh:
      string = "nama saya adalah Muhammad Andi"
      string = string[:17]+""+string[26:]
      print(string)
      nama saya adalah Andi
 
# Fungsi-fungsi pada String
  Python menyediakan beberapa fungsi built-in kelas string yang bisa digunakan pada operasi yang melibatkan string. Diantaranya adalah:
   1. upper() dan lower()
      Kedua fungsi ini digunakan untuk mengubah ukuran huruf menjadi huruf besar/kapital dan huruf kecil. Untuk mengubah ukuran huruf menjadi
      kapital, maka dapat digunakan fungsi upper(). Sebaliknya, fungsi lower() untuk mengubah huruf menjadi kecil.
      contoh:
        string1 = "nama saya adalah Andi"
        string1.upper()
        print(string1)
        NAMA SAYA ADALAH ANDI
      
        string2 = "Nama Saya adalah Andi"
        string2.lower
        print(string2)
        nama saya adalah andi
    
   2. len()
      Fungsi ini digunakan untuk mengetahui panjang karakter sebuah string.
      contoh:
        string = "coba hitung ada berapa karakter yang terdapat dalam string ini.."
        panjangstring = len(string)
        print(panjangstring)
        64
     
   3. rjust(), ljust(), dan center()
      Fungsi ini digunakan untuk mengatur rerata tampilan string. rjust() untuk mengatur rata kanan, ljust() untuk mengatur rata kiri, dan
      center() untuk mengatur rata tengah string.
      catatan:
      a. jangan lupa untuk mencantumkan argumen berupa angka pada fungsi agar komputer dapat mengeksekusi seberapa besar kita ingin mengatur
         rerataannya.
      contoh:
        string = "ini string untuk di reratakan"
        rataKiri = string.ljust(50)
        rataKanan = stringrjust(50)
        rataTengah = (string.center(50))
        print(rataKiri)
                              ini string untuk di reratakan
        print(rataKanan)
        ini string untuk di reratakan
        print(rataTengah)
                    ini string untuk di reratakan
      
   4. join()
      Fungsi ini digunakan untuk menggabungkan string yang terdapat dalam list, tuple, ataupun set. Fungsi ini sama dengan operasi penjumlahan
      pada string.
      contoh:
        list1 = ['ini', 'adalah', 'string', 'dalam', 'list']
        stringKosong = ""
        stringKosong.join(list1)
        'iniadalahstringdalamlist'
   
   5. index()
      Fungsi index() digunakan untuk mengetahui posisi karakter dalam string.
      catatan:
      a. fungsi index() hanya akan menampilkan posisi awal dari karakter yang dicari. Jadi, semisal ada banyak karakter 'a', hanya karakter 'a'
         pertama saja yang di index oleh fungsi ini.
      contoh:
        kata = "coba tebak ada di urutan berapakah huruf z dalam string ini?"
        print(kata.index('a'))
        3
        print(kata.index('z'))
        41
        
   6. replace()
      Fungsi replace() digunakan untuk mengganti karakter yang terdapat dalam sebuah string.
      catatan: 
      a. gunakan 2 argumen dalam fungsi tersebut, dengan argumen pertama berupa karakter yang ingin diganti dan argumen kedua berupa karakter
          pengganti.
      contoh:
        perkenalan = "Perkenalkan, nama saya Andi"
        print(perkenalan.replace('Andi', 'Muhammad'))
        Perkenalkan, nama saya Muhammad
        print(perkenalkan.replace('nama', ''))
        Perkenalkan,  saya Andi
 
# Menampilkan String Terformat
  Dengan formula print("%s"%(string)), kita dapat menampilkan string sesuai dengan format yang kita tentukan sendiri.
  contoh:
    harga1 = '10.000'
    harga2 = '12.500'
    kilo = '0.5'
    print("Hari ini, harga keripik tempe per %s kilo di pasar turun dari %s rupiah menjadi %s rupiah"%(kilo, harga2, harga1))
    Hari ini, harga keripik tempe per 0.5 kilo di pasar turun dari 12.500 rupiah menjadi 10.000 rupiah
  
================================================== 

# E. INPUT / MASUKAN DARI KEYBOARD
#    Untuk dapat memberikan masukan oleh user ke dalam pemrograman, python menyediakan fungsi built-in input() untuk versi Python3.

# Penggunaan fungsi input() untuk memberi masukan dari keyboard
  contoh:
    input("masukkan nama anda: ")
    masukkan nama anda: Muhammad Andi
    'Muhammad Andi'
    
# Menyimpan masukan dalam variable
  contoh:
   email = input("email anda: ")
   email anda: muhammadAndi@gmail.com
   password = input("password anda: ")
   password anda: 12345
   login = email + password
   print(login)
   muhammadAndi@gmail.com12345
 
# Kesalahan persepsi pada fungsi input()
  Kesalahan yang sering terjadi adalah ketika kita telah memberikan masukan berupa angka (baik integer/float) pada fungsi input(), kita lalu
  melakukan operasi aritmetika dengan harapan outputnya berupa hasil dari pengoperasian tersebut. Padahal, jenis data yang terdapat dalam fungsi
  input() merupakan jenis string dan bukan integer. Untuk mengakalinya, kita dapat menggunakan fungsi int() atau float() sebagai solusinya.
  contoh:
  (salah)
   angka1 = input('angka pertama = ')
   angka pertama = 3
   angka2 = input('angka kedua = ')
   angka kedua = 4
   hasil = angka1 * angka2
   Traceback (most recent call last):
     File "<pyshell#70>", line 1, in <module>
       hasil = angka1 * angka2
   TypeError: can't multiply sequence by non-int of type 'str'
    
   (solusi)
    angka1 = input('angka pertama = ')
    angka pertama = 3
    angka2 = input('angka kedua = ')
    angka kedua = 4
    hasil = int(angka1) * int(angka2)
    print(hasil)
    12
    
================================================== 
 
# F. KOMENTAR
#    Komentar merupakan sintaks/kode dalam sebuah program yang tidak akan dieksekusi. Penulisan komentar bertujuan untuk memberikan keterangan
     terhadap sintaks-sintaks yang ada dalam program. Komentar dintadai dengan karakter pagar (#).
     contoh:
      angka1 = input('angka pertama = ')    # ini adalah fungsi input
      angka pertama = 3
      angka2 = input('angka kedua = ')  
      angka kedua = 4
      hasil = int(angka1) * int(angka2)     # ini solusi agar hasil dari fungsi input dapat dieksekusi sebagai integer
      print(hasil)
      12
  
  
  
 
